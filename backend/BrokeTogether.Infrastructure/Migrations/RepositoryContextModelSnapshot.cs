// <auto-generated />
using System;
using BrokeTogether.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BrokeTogether.Infrastructure.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BrokeTogether.Core.Entities.Contribution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("HomeId")
                        .HasColumnType("uuid");

                    b.Property<string>("PaidById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("HomeId");

                    b.HasIndex("PaidById");

                    b.ToTable("Contributions");
                });

            modelBuilder.Entity("BrokeTogether.Core.Entities.ContributionSplit", b =>
                {
                    b.Property<Guid>("ContributionId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<decimal>("AmountOwed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.HasKey("ContributionId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ContributionSplits");
                });

            modelBuilder.Entity("BrokeTogether.Core.Entities.Home", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InviteCode")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InviteCode")
                        .IsUnique();

                    b.ToTable("Homes");
                });

            modelBuilder.Entity("BrokeTogether.Core.Entities.HomeMember", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<Guid>("HomeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "HomeId");

                    b.HasIndex("HomeId");

                    b.ToTable("HomeMembers");
                });

            modelBuilder.Entity("BrokeTogether.Core.Entities.ShoppingListItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ContributionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("HomeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContributionId");

                    b.HasIndex("HomeId");

                    b.ToTable("ShoppingListItems");
                });

            modelBuilder.Entity("BrokeTogether.Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("BrokeTogether.Core.Entities.Contribution", b =>
                {
                    b.HasOne("BrokeTogether.Core.Entities.Home", "Home")
                        .WithMany("Contributions")
                        .HasForeignKey("HomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BrokeTogether.Core.Entities.User", "PaidBy")
                        .WithMany("ContributionsPaid")
                        .HasForeignKey("PaidById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Home");

                    b.Navigation("PaidBy");
                });

            modelBuilder.Entity("BrokeTogether.Core.Entities.ContributionSplit", b =>
                {
                    b.HasOne("BrokeTogether.Core.Entities.Contribution", "Contribution")
                        .WithMany("Splits")
                        .HasForeignKey("ContributionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BrokeTogether.Core.Entities.User", "User")
                        .WithMany("OwedSplits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contribution");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrokeTogether.Core.Entities.HomeMember", b =>
                {
                    b.HasOne("BrokeTogether.Core.Entities.Home", "Home")
                        .WithMany("Members")
                        .HasForeignKey("HomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BrokeTogether.Core.Entities.User", "User")
                        .WithMany("HomeMemeberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Home");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrokeTogether.Core.Entities.ShoppingListItem", b =>
                {
                    b.HasOne("BrokeTogether.Core.Entities.Contribution", "Contribution")
                        .WithMany("PurchasedItems")
                        .HasForeignKey("ContributionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BrokeTogether.Core.Entities.Home", "Home")
                        .WithMany("ShoppingListItems")
                        .HasForeignKey("HomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contribution");

                    b.Navigation("Home");
                });

            modelBuilder.Entity("BrokeTogether.Core.Entities.Contribution", b =>
                {
                    b.Navigation("PurchasedItems");

                    b.Navigation("Splits");
                });

            modelBuilder.Entity("BrokeTogether.Core.Entities.Home", b =>
                {
                    b.Navigation("Contributions");

                    b.Navigation("Members");

                    b.Navigation("ShoppingListItems");
                });

            modelBuilder.Entity("BrokeTogether.Core.Entities.User", b =>
                {
                    b.Navigation("ContributionsPaid");

                    b.Navigation("HomeMemeberships");

                    b.Navigation("OwedSplits");
                });
#pragma warning restore 612, 618
        }
    }
}
